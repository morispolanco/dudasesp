import streamlit as st
import requests
import json

# Configuraci√≥n de la p√°gina para optimizar en m√≥viles
st.set_page_config(
    page_title="Dudas y dificultades del espa√±ol",
    page_icon="üó®Ô∏è",
    layout="centered",  # Centra el contenido en la pantalla
    initial_sidebar_state="collapsed"  # Oculta la barra lateral inicialmente
)

# T√≠tulo de la aplicaci√≥n
st.title("üó®Ô∏è Dudas y dificultades del espa√±ol")

# Barra lateral con informaci√≥n (opcional)
st.sidebar.header("Acerca de esta aplicaci√≥n")
st.sidebar.markdown("""
Bienvenido al **chatbot de Dudas y dificultades del espa√±ol**. Este asistente utiliza el modelo `klusterai/Meta-Llama-3.3-70B-Instruct-Turbo` para responder tus preguntas sobre gram√°tica, sintaxis, literatura y otros aspectos relacionados con el idioma espa√±ol.

### ¬øC√≥mo funciona?  
1. Escribe tu consulta en el campo de texto.  
2. Presiona el bot√≥n **"Enviar"**.  
3. Recibe una respuesta detallada sobre tus dudas del idioma.

---

### Autor:
**Moris Polanco**  
Miembro de la **Academia Guatemalteca de la Lengua**.
""")

# Instrucciones para el usuario
st.markdown("""
### Instrucciones:
Escribe tu consulta sobre el idioma espa√±ol en el cuadro de texto a continuaci√≥n y presiona el bot√≥n **"Enviar"** para recibir una respuesta detallada.
""")

# Inicializar el historial de chat en session_state si no existe
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Mostrar el historial de chat
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Entrada del usuario
user_query = st.chat_input("üìù Escribe tu consulta sobre el idioma espa√±ol:")

# Bot√≥n para enviar la consulta
if user_query:
    # Agregar la consulta del usuario al historial de chat
    st.session_state.chat_history.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    with st.spinner("üîÑ Procesando tu consulta..."):
        try:
            # Recuperar la clave de API desde los secretos
            api_key = st.secrets["klusterai"]["api_key"]  # Aseg√∫rate de tener la clave API en Streamlit secrets

            # Crear el prompt y el payload para la solicitud
            system_prompt = """
            Contexto:
            Eres un renombrado ling√ºista y acad√©mico del espa√±ol con m√°s de dos d√©cadas de experiencia en la ense√±anza, investigaci√≥n y asesoramiento sobre el idioma espa√±ol. Tienes un conocimiento profundo de las complejidades ling√º√≠sticas del espa√±ol, sus dialectos y su evoluci√≥n. Est√°s bien versado en las pautas y recomendaciones oficiales de la Real Academia Espa√±ola (RAE) y la Fundaci√≥n del Espa√±ol Urgente (Fund√©u). Se te busca frecuentemente para aclarar dudas complejas sobre el uso del lenguaje y resolver disputas relacionadas con la gram√°tica, sintaxis, estilo y uso del espa√±ol.

            Rol:
            Eres un experto l√≠der en ling√º√≠stica del espa√±ol, con un s√≥lido historial en ense√±anza, investigaci√≥n y oratoria. Posees un conocimiento intrincado de la gram√°tica, sintaxis, sem√°ntica y pragm√°tica del espa√±ol. Has escrito varios libros y art√≠culos acad√©micos sobre el tema y has contribuido a revistas ling√º√≠sticas prestigiosas. Hablas espa√±ol e ingl√©s de forma fluida y puedes comunicar conceptos ling√º√≠sticos complejos tanto a hablantes nativos como no nativos del espa√±ol.

            Acci√≥n:
            1. Responde preguntas relacionadas con gram√°tica, sintaxis, sem√°ntica y pragm√°tica del espa√±ol.
            2. Proporciona ejemplos pr√°cticos y claros.
            3. Ofrece recomendaciones basadas en la RAE y Fund√©u.
            """

            # Construir el payload
            payload = {
                "model": "klusterai/Meta-Llama-3.3-70B-Instruct-Turbo",
                "max_completion_tokens": 1000,
                "temperature": 0.8,
                "top_p": 1,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_query}
                ]
            }

            # Definir los encabezados de la solicitud
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }

            # Realizar la solicitud a la API de Kluster.ai
            response = requests.post(
                "https://api.kluster.ai/v1/chat/completions",
                headers=headers,
                json=payload
            )

            # Manejar la respuesta de la API
            if response.status_code == 200:
                response_data = response.json()
                message = response_data.get("choices", [{}])[0].get("message", {}).get("content", "")
                if message:
                    # Agregar la respuesta del chatbot al historial de chat
                    st.session_state.chat_history.append({"role": "assistant", "content": message})
                    with st.chat_message("assistant"):
                        st.markdown(message)
                else:
                    st.error("‚ö†Ô∏è La respuesta del chatbot no contiene contenido.")
            else:
                st.error(f"‚ö†Ô∏è Error en la solicitud: {response.status_code}")
                st.error(f"Detalles: {response.text}")

        except Exception as e:
            st.error(f"‚ùå Ocurri√≥ un error: {e}")

# Footer con Copyright y enlace
st.markdown(
    """
    <div style="text-align: center; margin-top: 50px; font-size: 0.9em; color: #666;">
        <p>Copyright ¬© 2025 <a href="https://hablemosbien.org" target="_blank">Hablemos bien</a></p>
    </div>
    """,
    unsafe_allow_html=True
)
